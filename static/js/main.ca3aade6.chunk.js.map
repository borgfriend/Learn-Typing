{"version":3,"sources":["Stores/routingStore.ts","Modules/Overview.tsx","Modules/TypingLessons/Stores/ExerciseStore.ts","Modules/TypingLessons/Components/Exercise.tsx","Modules/TypingLessons/Components/ResultDisplay.tsx","Modules/TypingLessons/TypingLesson.tsx","App.tsx","index.tsx"],"names":["routingStore","RouterStore","lessonData","require","LessonCard","_ref","lesson","react","card","title","description","buttons","onClick","push","concat","id","Overview","overview","map","val","key","Overview_LessonCard","exerciseStore","action","bound","text","this","exerciseFields","currentIndex","userReturn","color","value","_this","split","item","startTime","Date","lessonComplete","endTime","startLesson","console","log","filter","length","getTime","observable","computed","Exercise","observer","Exercise_class","_React$Component","_getPrototypeOf2","Object","classCallCheck","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","textStyle","fontFamily","handleKeyPress","e","pressedKey","keyCode","target","document","body","preventDefault","endLesson","inherits","createClass","addEventListener","setExercise","removeEventListener","style","backgroundColor","className","React","ResultDisplay","mistakes","time","reset","TypingLesson","TypingLesson_class","find","toString","props","lessonId","window","scrollTo","Exercise_Exercise","Navigation","inject","goHome","navbar","Group","Heading","minimal","icon","App","App_Navigation","react_router_dom_es","exact","path","component","render","match","TypingLesson_TypingLesson","params","hashHistory","createHashHistory","basename","process","history","syncHistoryWithStore","ReactDOM","index_module","stores","es","src_App","getElementById"],"mappings":"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","file":"static/js/main.ca3aade6.chunk.js","sourcesContent":["import { RouterStore } from 'mobx-react-router';\r\n\r\nexport const routingStore = new RouterStore();","/// <reference path=\"./resources/lessons.d.ts\" />\r\n\r\nimport { Button, Card } from '@blueprintjs/core';\r\nimport * as React from 'react';\r\nimport { routingStore } from '../Stores';\r\n\r\n\r\nconst lessonData: Array<Lesson> = require('./resources/lessons.json');\r\n\r\ninterface LessonCardProps {\r\n  lesson: Lesson;\r\n}\r\n\r\nconst LessonCard: React.SFC<LessonCardProps> = ({ lesson }) => (\r\n  <Card>\r\n    <h5>{lesson.title}</h5>\r\n    <p>{lesson.description}</p>\r\n\r\n    <Button\r\n      onClick={() =>\r\n        routingStore.push(`/lesson${lesson.id}`)\r\n      }\r\n    >\r\n      Start Lesson\r\n    </Button>\r\n\r\n  </Card>\r\n);\r\n\r\nexport const Overview: React.SFC = () => {\r\n\r\n  const overview = lessonData.map((val) => (\r\n    <div key={val.id}>\r\n      <LessonCard lesson={val} />\r\n    </div>\r\n  ));\r\n\r\n  return (\r\n    <div>\r\n      {overview}\r\n    </div>\r\n  );\r\n\r\n};","import { action, observable, computed } from 'mobx';\r\n\r\ninterface CharField {\r\n    value: string;\r\n    userReturn?: string;\r\n    color: string;\r\n}\r\n\r\nclass ExerciseStore {\r\n    @observable exerciseFields: CharField[] = [];\r\n    @observable currentIndex: number = 0;\r\n    @observable lessonComplete: boolean = false;\r\n\r\n    text: string = '';\r\n    startTime: Date;\r\n    endTime: Date;\r\n\r\n    @action.bound\r\n    pressedKey(val: string) {\r\n        this.exerciseFields[this.currentIndex].userReturn = val;\r\n        this.exerciseFields[this.currentIndex].color =\r\n            (this.exerciseFields[this.currentIndex].value === val) ? 'lightgreen' : 'red';\r\n        this.currentIndex++;\r\n    }\r\n\r\n    @action\r\n    setExercise() {\r\n        this.exerciseFields = [];\r\n        this.text\r\n            .split('')\r\n            .map((item) => {\r\n                this.exerciseFields.push({ value: item, color: 'transparent' });\r\n            });\r\n        this.currentIndex = 0;\r\n    }\r\n\r\n    @computed\r\n    get mistakes() {\r\n        console.log(this.exerciseFields);\r\n        return this.exerciseFields.filter(val => val.color === 'red').length;\r\n    }\r\n\r\n    @action\r\n    startLesson() {\r\n        this.startTime = new Date();\r\n        this.lessonComplete = false;\r\n    }\r\n\r\n    @action\r\n    endLesson() {\r\n        this.endTime = new Date();\r\n        this.lessonComplete = true;\r\n    }\r\n\r\n    @action\r\n    reset() {\r\n        this.exerciseFields = [];\r\n        this.startLesson();\r\n    }\r\n\r\n    @computed\r\n    get time() {\r\n        return (this.endTime.getTime() - this.startTime.getTime()) / 1000;\r\n    }\r\n\r\n}\r\n\r\nexport const exerciseStore = new ExerciseStore();","import * as React from 'react';\r\n\r\nimport { observer } from 'mobx-react';\r\nimport { exerciseStore } from '../Stores/ExerciseStore';\r\n\r\n@observer\r\nexport class Exercise extends React.Component {\r\n\r\n    textStyle = {\r\n        fontFamily: 'Courier New'\r\n    };\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keypress', this.handleKeyPress);\r\n        exerciseStore.setExercise();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('keypress', this.handleKeyPress);\r\n    }\r\n\r\n    handleKeyPress = (e: KeyboardEvent) => {\r\n        let { currentIndex, pressedKey } = exerciseStore;\r\n        if (e.keyCode === 32 && e.target === document.body) {\r\n            e.preventDefault();\r\n        }\r\n\r\n        if (currentIndex === exerciseStore.text.length) {\r\n            exerciseStore.endLesson();\r\n            return;\r\n        }\r\n\r\n        if (e.key === 'Enter') {\r\n            pressedKey('\\n');\r\n        } else {\r\n            pressedKey(e.key);\r\n        }\r\n\r\n        if (currentIndex === 1) {\r\n            exerciseStore.startLesson();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const text = exerciseStore.exerciseFields\r\n            .map((item, key) => (\r\n                <span\r\n                    key={key}\r\n                    style={{\r\n                        backgroundColor: item.color\r\n                    }}\r\n                    className={`${(key === exerciseStore.currentIndex) ? 'current' : ''}`}\r\n                >\r\n                    {item.value === '\\n' && (<span className=\"enter\"> <br /></span>)}\r\n                    {item.value}\r\n                </span>\r\n            ));\r\n\r\n        return (\r\n            <section style={this.textStyle}>\r\n                {text}\r\n            </section>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nimport { observer } from 'mobx-react';\r\nimport { exerciseStore } from '../Stores/ExerciseStore';\r\nimport { Button } from '@blueprintjs/core';\r\n\r\nexport const ResultDisplay: React.SFC = observer(() => (\r\n    <>\r\n        <ul>\r\n            <li>Mistakes: {exerciseStore.mistakes}</li>\r\n            <li>Time: {exerciseStore.time}</li>\r\n        </ul>\r\n        <Button onClick={() => { exerciseStore.reset(); }}>Reset</Button>\r\n    </>\r\n));","/// <reference path=\"./../resources/lessons.d.ts\" />\r\nimport * as React from 'react';\r\n\r\nvar lessonData = require('./../resources/lessons.json');\r\n\r\nimport './TypingLesson.css';\r\n\r\nimport { observer } from 'mobx-react';\r\nimport { exerciseStore } from './Stores/ExerciseStore';\r\nimport { Exercise } from './Components/Exercise';\r\nimport { ResultDisplay } from './Components/ResultDisplay';\r\n\r\ninterface TypingLessonProps {\r\n    lessonId: string;\r\n}\r\n\r\n@observer\r\nexport class TypingLesson extends React.Component<TypingLessonProps> {\r\n\r\n    componentWillMount() {\r\n        let lesson = lessonData.find((val: Lesson) => {\r\n            return val.id.toString() === this.props.lessonId;\r\n        });\r\n        exerciseStore.text = lesson.lesson;\r\n       \r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {exerciseStore.lessonComplete ? (<ResultDisplay />) : (<Exercise />)}\r\n            </>\r\n        );\r\n    }\r\n}","import { Button, Navbar } from '@blueprintjs/core';\r\nimport { inject } from 'mobx-react';\r\nimport { RouterStore } from 'mobx-react-router';\r\nimport * as React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { Overview } from './Modules/Overview';\r\nimport { TypingLesson } from './Modules/TypingLessons/TypingLesson';\r\n\r\n@inject(\"routingStore\")\r\nclass Navigation extends React.Component<{ routingStore?: RouterStore }>{\r\n  render() {\r\n    return (\r\n      <Navbar>\r\n        <Navbar.Group>\r\n          <Navbar.Heading>\r\n            Learn Typing\r\n          </Navbar.Heading>\r\n          <Button minimal={true} icon=\"home\" onClick={this.goHome}>Home</Button>\r\n        </Navbar.Group>\r\n      </Navbar>\r\n    );\r\n  }\r\n\r\n  private goHome = () => {\r\n    this.props.routingStore!.push(`/`);\r\n  }\r\n}\r\n\r\nclass App extends React.Component<{}, {}> {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Navigation />\r\n        <Route exact={true} path=\"/\" component={Overview} />\r\n        <Route\r\n          path=\"/lesson:id\"\r\n          render={({ match }) => (\r\n              <TypingLesson lessonId={match.params.id} />\r\n           )}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import createHashHistory from 'history/createHashHistory';\r\nimport { Provider } from 'mobx-react';\r\nimport { syncHistoryWithStore } from 'mobx-react-router';\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Router } from 'react-router';\r\nimport 'typeface-roboto';\r\nimport App from './App';\r\nimport './index.css';\r\nimport * as stores from './Stores';\r\nimport { routingStore } from './Stores/routingStore';\r\n\r\nconst hashHistory = createHashHistory({ basename: process.env.PUBLIC_URL });\r\nconst history = syncHistoryWithStore(hashHistory, routingStore);\r\n\r\nReactDOM.render(\r\n  <Provider {...stores}>\r\n    <Router history={history}>\r\n      <App />\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById('root') as HTMLElement\r\n);"],"sourceRoot":""}