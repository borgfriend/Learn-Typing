{"version":3,"sources":["components/Button/Button.module.css","components/Card/Card.module.css","components/ExerciseChar/ExerciseChar.module.css","components/NavBar/NavBar.module.css","Stores/routingStore.ts","components/Button/Button.tsx","components/Card/Card.tsx","Modules/Overview.tsx","Modules/TypingLessons/Stores/ExerciseStore.ts","components/ExerciseChar/ExerciseChar.tsx","Modules/TypingLessons/Components/Exercise.tsx","Modules/TypingLessons/Components/ResultDisplay.tsx","Modules/TypingLessons/TypingLesson.tsx","components/NavBar/NavBar.tsx","App.tsx","index.tsx"],"names":["module","exports","button","card","exerciseChar","cursor-blink","navbar","routingStore","RouterStore","Button","_ref","onClick","children","_ref$color","color","react","className","concat","styles","Card","lessonData","require","LessonCard","lesson","Card_Card","title","description","Button_Button","push","id","Overview","overview","map","val","key","Overview_LessonCard","exerciseStore","action","bound","text","startTime","endTime","this","exerciseFields","currentIndex","userReturn","value","_this","split","forEach","item","Date","lessonComplete","startLesson","filter","length","getTime","observable","computed","ExerciseChar","data","isCurrent","data-current","data-state","Exercise","observer","Exercise_class","_React$Component","_getPrototypeOf2","Object","classCallCheck","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","handleKeyPress","e","pressedKey","target","document","body","preventDefault","endLesson","inherits","createClass","addEventListener","setExercise","removeEventListener","ExerciseChar_ExerciseChar","React","ResultDisplay","mistakes","time","reset","TypingLesson","TypingLesson_class","find","toString","props","lessonId","window","scrollTo","Exercise_Exercise","NavBar","Navigation","inject","goHome","NavBar_NavBar","App","App_Navigation","react_router","exact","path","component","render","match","TypingLesson_TypingLesson","params","hashHistory","createHashHistory","basename","process","history","syncHistoryWithStore","ReactDOM","mobx_react_module","stores","src_App","getElementById"],"mappings":"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","file":"static/js/main.beff80a2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3QF_k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1eE8R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"exerciseChar\":\"ExerciseChar_exerciseChar__2BhX-\",\"cursor-blink\":\"ExerciseChar_cursor-blink__1ySeW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"NavBar_navbar__yNL3i\"};","import { RouterStore } from 'mobx-react-router';\n\nexport const routingStore = new RouterStore();","import * as React from 'react';\nimport styles from './Button.module.css';\n\ntype colors = 'default' | 'primary'\n\ninterface IButtonProps {\n    onClick: () => void;\n    color?: colors;\n}\n/**\n * A Button Component\n * A button executes \n * @param props\n */\nexport const Button: React.SFC<IButtonProps> = ({ onClick, children, color = 'default' }) => {\n    return (<button\n        className={`${styles.button} ${styles[color]}`}\n        onClick = { onClick }\n        color={`${color}`}\n        >\n        { children }\n    </button >);\n}","import * as React from 'react';\nimport styles from './Card.module.css';\n\nexport const Card: React.SFC = ({children}) => {\n    return <div className={styles.card}>\n        {children}\n    </div>\n}","/// <reference path=\"./resources/lessons.d.ts\" />\n\n\nimport * as React from 'react';\nimport { routingStore } from '../Stores';\nimport { Button } from '../components/Button/Button';\nimport { Card } from '../components/Card/Card';\n\n\nconst lessonData: Array<Lesson> = require('./resources/lessons.json');\n\ninterface LessonCardProps {\n  lesson: Lesson;\n}\n\nconst LessonCard: React.SFC<LessonCardProps> = ({ lesson }) => (\n  <Card>\n    <h2>{lesson.title}</h2>\n    <p>{lesson.description}</p>\n\n    <Button\n      onClick={() =>\n        routingStore.push(`/lesson${lesson.id}`)\n      }\n    >\n      Start Lesson\n    </Button>\n\n  </Card>\n);\n\nexport const Overview: React.SFC = () => {\n\n  const overview = lessonData.map((val) => (\n    <div key={val.id}>\n      <LessonCard lesson={val} />\n    </div>\n  ));\n\n  return (\n    <div>\n      {overview}\n    </div>\n  );\n\n};","import { action, computed, observable } from 'mobx';\n\nexport interface CharField {\n  value: string;\n  userReturn?: string;\n  color: string;\n}\n\nclass ExerciseStore {\n  @observable exerciseFields: CharField[] = [];\n  @observable currentIndex: number = 0;\n  @observable lessonComplete: boolean = false;\n\n  text: string = '';\n  startTime: Date;\n  endTime: Date;\n\n  @action.bound\n  pressedKey(val: string) {\n    this.exerciseFields[this.currentIndex].userReturn = val;\n    this.exerciseFields[this.currentIndex].color =\n      (this.exerciseFields[this.currentIndex].value === val) ? 'ok' : 'error';\n    this.currentIndex++;\n  }\n\n  @action\n  setExercise() {\n    this.exerciseFields = [];\n    this.text\n      .split('')\n      .forEach((item) => {\n        this.exerciseFields.push({ value: item, color: 'transparent' });\n      });\n    this.currentIndex = 0;\n  }\n\n  @computed\n  get mistakes() {\n    return this.exerciseFields.filter(val => val.color === 'red').length;\n  }\n\n  @action\n  startLesson() {\n    this.startTime = new Date();\n    this.lessonComplete = false;\n  }\n\n  @action\n  endLesson() {\n    this.endTime = new Date();\n    this.lessonComplete = true;\n  }\n\n  @action\n  reset() {\n    this.exerciseFields = [];\n    this.startLesson();\n  }\n\n  @computed\n  get time() {\n    return (this.endTime.getTime() - this.startTime.getTime()) / 1000;\n  }\n\n}\n\nexport const exerciseStore = new ExerciseStore();","import * as React from 'react';\nimport styles from './ExerciseChar.module.css'\n\nimport { CharField } from '../../Modules/TypingLessons/Stores/ExerciseStore';\n\ninterface IExerciseChar {\n    data: CharField;\n    isCurrent: boolean;\n}\n\nexport const ExerciseChar:React.SFC<IExerciseChar> = ({data, isCurrent}) => {\n    return (\n        <span \n            className={styles.exerciseChar} \n            data-current={isCurrent}\n            data-state={data.color}\n        >\n            {data.value === '\\n' && (<span className=\"enter\"><br /></span>)}\n            {data.value}\n        </span>\n    );\n}\n","import * as React from 'react';\n\nimport { observer } from 'mobx-react';\nimport { exerciseStore } from '../Stores/ExerciseStore';\nimport { ExerciseChar } from '../../../components/ExerciseChar/ExerciseChar';\n\n@observer\nexport class Exercise extends React.Component {\n\n    componentDidMount() {\n        document.addEventListener('keypress', this.handleKeyPress);\n        exerciseStore.setExercise();\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keypress', this.handleKeyPress);\n    }\n\n    handleKeyPress = (e: KeyboardEvent) => {\n        let { currentIndex, pressedKey } = exerciseStore;\n        if (e.key === \"Space\" && e.target === document.body) {\n            e.preventDefault();\n        }\n\n        if (currentIndex === exerciseStore.text.length) {\n            exerciseStore.endLesson();\n            return;\n        }\n\n        if (e.key === 'Enter') {\n            pressedKey('\\n');\n        } else {\n            pressedKey(e.key);\n        }\n\n        if (currentIndex === 1) {\n            exerciseStore.startLesson();\n        }\n    }\n\n    render() {\n        const text = exerciseStore.exerciseFields\n            .map((item, key) => (\n                <ExerciseChar\n                    key={key}\n                    data={item}\n                    isCurrent={key === exerciseStore.currentIndex}\n                />\n            ));\n\n        return (\n            <section>\n                {text}\n            </section>\n        );\n    }\n}\n","import * as React from 'react';\n\nimport { observer } from 'mobx-react';\nimport { exerciseStore } from '../Stores/ExerciseStore';\nimport { Button } from '../../../components/Button/Button';\n\n\nexport const ResultDisplay: React.SFC = observer(() => (\n    <>\n        <ul>\n            <li>Mistakes: {exerciseStore.mistakes}</li>\n            <li>Time: {exerciseStore.time}</li>\n        </ul>\n        <Button onClick={() => { exerciseStore.reset(); }}>Reset</Button>\n    </>\n));","/// <reference path=\"./../resources/lessons.d.ts\" />\nimport { observer } from 'mobx-react';\nimport * as React from 'react';\nimport { Card } from '../../components/Card/Card';\nimport { Exercise } from './Components/Exercise';\nimport { ResultDisplay } from './Components/ResultDisplay';\nimport { exerciseStore } from './Stores/ExerciseStore';\n\n\nvar lessonData = require('./../resources/lessons.json');\ninterface TypingLessonProps {\n  lessonId: string;\n}\n\n@observer\nexport class TypingLesson extends React.Component<TypingLessonProps> {\n\n  componentWillMount() {\n    let lesson = lessonData.find((val: Lesson) => {\n      return val.id.toString() === this.props.lessonId;\n    });\n    exerciseStore.text = lesson.lesson;\n\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    if (exerciseStore.lessonComplete) {\n      return (\n        <Card>\n          <ResultDisplay />\n        </Card>\n      );\n    } else {\n      return (\n        <Card>\n          <Exercise />\n        </Card>\n      );\n    }\n\n  }\n}","import * as React from 'react';\nimport styles from './NavBar.module.css';\n\nexport const NavBar: React.SFC = ({children}) => {\n    return <div className={styles.navbar}>\n        {children}\n    </div>\n}","import { inject } from 'mobx-react';\nimport { RouterStore } from 'mobx-react-router';\nimport * as React from 'react';\nimport { Route } from 'react-router-dom';\nimport { Overview } from './Modules/Overview';\nimport { TypingLesson } from './Modules/TypingLessons/TypingLesson';\nimport { NavBar } from './components/NavBar/NavBar';\n\n@inject(\"routingStore\")\nclass Navigation extends React.Component<{ routingStore?: RouterStore }>{\n  render() {\n    return (\n      <NavBar>\n        <h1 onClick={this.goHome}>Learn Typing</h1>\n      </NavBar>\n    );\n  }\n\n  private goHome = () => {\n    this.props.routingStore!.push(`/`);\n  }\n}\n\nclass App extends React.Component<{}, {}> {\n  render() {\n    return (\n      <>\n        <Navigation />\n        <Route exact={true} path=\"/\" component={Overview} />\n        <Route\n          path=\"/lesson:id\"\n          render={({ match }) => (\n              <TypingLesson lessonId={match.params.id} />\n           )}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import createHashHistory from 'history/createHashHistory';\nimport { Provider } from 'mobx-react';\nimport { syncHistoryWithStore } from 'mobx-react-router';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Router } from 'react-router';\nimport 'typeface-roboto';\nimport App from './App';\nimport './index.css';\nimport * as stores from './Stores';\nimport { routingStore } from './Stores/routingStore';\n\nconst hashHistory = createHashHistory({ basename: process.env.PUBLIC_URL });\nconst history = syncHistoryWithStore(hashHistory, routingStore);\n\nReactDOM.render(\n  <Provider {...stores}>\n    <Router history={history}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root') as HTMLElement\n);"],"sourceRoot":""}