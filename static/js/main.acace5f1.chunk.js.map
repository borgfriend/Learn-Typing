{"version":3,"sources":["components/Button/Button.module.css","components/Card/Card.module.css","components/NavBar/NavBar.module.css","Stores/routingStore.ts","components/Button/Button.tsx","components/Card/Card.tsx","Modules/Overview.tsx","Modules/TypingLessons/Stores/ExerciseStore.ts","Modules/TypingLessons/Components/Exercise.tsx","Modules/TypingLessons/Components/ResultDisplay.tsx","Modules/TypingLessons/TypingLesson.tsx","components/NavBar/NavBar.tsx","App.tsx","index.tsx"],"names":["module","exports","button","card","navbar","routingStore","RouterStore","Button","_ref","onClick","children","_ref$color","color","react","className","concat","styles","Card","lessonData","require","LessonCard","lesson","Card_Card","title","description","Button_Button","push","id","Overview","overview","map","val","key","Overview_LessonCard","exerciseStore","action","bound","text","startTime","endTime","this","exerciseFields","currentIndex","userReturn","value","_this","split","item","Date","lessonComplete","startLesson","console","log","filter","length","getTime","observable","computed","Exercise","observer","Exercise_class","_React$Component","_getPrototypeOf2","Object","classCallCheck","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","textStyle","fontFamily","handleKeyPress","e","pressedKey","keyCode","target","document","body","preventDefault","endLesson","inherits","createClass","addEventListener","setExercise","removeEventListener","style","backgroundColor","React","ResultDisplay","mistakes","time","reset","TypingLesson","TypingLesson_class","find","toString","props","lessonId","window","scrollTo","Exercise_Exercise","NavBar","Navigation","inject","goHome","NavBar_NavBar","App","App_Navigation","react_router","exact","path","component","render","match","TypingLesson_TypingLesson","params","hashHistory","createHashHistory","basename","process","history","syncHistoryWithStore","ReactDOM","index_module","stores","src_App","getElementById"],"mappings":"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","file":"static/js/main.acace5f1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3eYfM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3qTiA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"NavBar_navbar__2FNzX\"};","import { RouterStore } from 'mobx-react-router';\n\nexport const routingStore = new RouterStore();","import * as React from 'react';\nimport styles from './Button.module.css';\n\ntype colors = 'default' | 'primary'\n\ninterface IButtonProps {\n    onClick: () => void;\n    color?: colors;\n}\n/**\n * A Button Component\n * A button executes \n * @param props\n */\nexport const Button: React.SFC<IButtonProps> = ({ onClick, children, color = 'default' }) => {\n    return (<button\n        className={`${styles.button} ${styles[color]}`}\n        onClick = { onClick }\n        color={`${color}`}\n        >\n        { children }\n    </button >);\n}","import * as React from 'react';\nimport styles from './Card.module.css';\n\nexport const Card: React.SFC = ({children}) => {\n    return <div className={styles.card}>\n        {children}\n    </div>\n}","/// <reference path=\"./resources/lessons.d.ts\" />\n\n\nimport * as React from 'react';\nimport { routingStore } from '../Stores';\nimport { Button } from '../components/Button/Button';\nimport { Card } from '../components/Card/Card';\n\n\nconst lessonData: Array<Lesson> = require('./resources/lessons.json');\n\ninterface LessonCardProps {\n  lesson: Lesson;\n}\n\nconst LessonCard: React.SFC<LessonCardProps> = ({ lesson }) => (\n  <Card>\n    <h2>{lesson.title}</h2>\n    <p>{lesson.description}</p>\n\n    <Button\n      onClick={() =>\n        routingStore.push(`/lesson${lesson.id}`)\n      }\n    >\n      Start Lesson\n    </Button>\n\n  </Card>\n);\n\nexport const Overview: React.SFC = () => {\n\n  const overview = lessonData.map((val) => (\n    <div key={val.id}>\n      <LessonCard lesson={val} />\n    </div>\n  ));\n\n  return (\n    <div>\n      {overview}\n    </div>\n  );\n\n};","import { action, observable, computed } from 'mobx';\n\ninterface CharField {\n    value: string;\n    userReturn?: string;\n    color: string;\n}\n\nclass ExerciseStore {\n    @observable exerciseFields: CharField[] = [];\n    @observable currentIndex: number = 0;\n    @observable lessonComplete: boolean = false;\n\n    text: string = '';\n    startTime: Date;\n    endTime: Date;\n\n    @action.bound\n    pressedKey(val: string) {\n        this.exerciseFields[this.currentIndex].userReturn = val;\n        this.exerciseFields[this.currentIndex].color =\n            (this.exerciseFields[this.currentIndex].value === val) ? 'lightgreen' : 'red';\n        this.currentIndex++;\n    }\n\n    @action\n    setExercise() {\n        this.exerciseFields = [];\n        this.text\n            .split('')\n            .map((item) => {\n                this.exerciseFields.push({ value: item, color: 'transparent' });\n            });\n        this.currentIndex = 0;\n    }\n\n    @computed\n    get mistakes() {\n        console.log(this.exerciseFields);\n        return this.exerciseFields.filter(val => val.color === 'red').length;\n    }\n\n    @action\n    startLesson() {\n        this.startTime = new Date();\n        this.lessonComplete = false;\n    }\n\n    @action\n    endLesson() {\n        this.endTime = new Date();\n        this.lessonComplete = true;\n    }\n\n    @action\n    reset() {\n        this.exerciseFields = [];\n        this.startLesson();\n    }\n\n    @computed\n    get time() {\n        return (this.endTime.getTime() - this.startTime.getTime()) / 1000;\n    }\n\n}\n\nexport const exerciseStore = new ExerciseStore();","import * as React from 'react';\n\nimport { observer } from 'mobx-react';\nimport { exerciseStore } from '../Stores/ExerciseStore';\n\n@observer\nexport class Exercise extends React.Component {\n\n    textStyle = {\n        fontFamily: 'Courier New'\n    };\n\n    componentDidMount() {\n        document.addEventListener('keypress', this.handleKeyPress);\n        exerciseStore.setExercise();\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keypress', this.handleKeyPress);\n    }\n\n    handleKeyPress = (e: KeyboardEvent) => {\n        let { currentIndex, pressedKey } = exerciseStore;\n        if (e.keyCode === 32 && e.target === document.body) {\n            e.preventDefault();\n        }\n\n        if (currentIndex === exerciseStore.text.length) {\n            exerciseStore.endLesson();\n            return;\n        }\n\n        if (e.key === 'Enter') {\n            pressedKey('\\n');\n        } else {\n            pressedKey(e.key);\n        }\n\n        if (currentIndex === 1) {\n            exerciseStore.startLesson();\n        }\n    }\n\n    render() {\n        const text = exerciseStore.exerciseFields\n            .map((item, key) => (\n                <span\n                    key={key}\n                    style={{\n                        backgroundColor: item.color\n                    }}\n                    className={`${(key === exerciseStore.currentIndex) ? 'current' : ''}`}\n                >\n                    {item.value === '\\n' && (<span className=\"enter\"> <br /></span>)}\n                    {item.value}\n                </span>\n            ));\n\n        return (\n            <section style={this.textStyle}>\n                {text}\n            </section>\n        );\n    }\n}\n","import * as React from 'react';\n\nimport { observer } from 'mobx-react';\nimport { exerciseStore } from '../Stores/ExerciseStore';\nimport { Button } from '../../../components/Button/Button';\n\n\nexport const ResultDisplay: React.SFC = observer(() => (\n    <>\n        <ul>\n            <li>Mistakes: {exerciseStore.mistakes}</li>\n            <li>Time: {exerciseStore.time}</li>\n        </ul>\n        <Button onClick={() => { exerciseStore.reset(); }}>Reset</Button>\n    </>\n));","/// <reference path=\"./../resources/lessons.d.ts\" />\nimport * as React from 'react';\n\nvar lessonData = require('./../resources/lessons.json');\n\nimport './TypingLesson.css';\n\nimport { observer } from 'mobx-react';\nimport { exerciseStore } from './Stores/ExerciseStore';\nimport { Exercise } from './Components/Exercise';\nimport { ResultDisplay } from './Components/ResultDisplay';\nimport { Card } from '../../components/Card/Card';\n\ninterface TypingLessonProps {\n    lessonId: string;\n}\n\n@observer\nexport class TypingLesson extends React.Component<TypingLessonProps> {\n\n    componentWillMount() {\n        let lesson = lessonData.find((val: Lesson) => {\n            return val.id.toString() === this.props.lessonId;\n        });\n        exerciseStore.text = lesson.lesson;\n       \n        window.scrollTo(0, 0);\n    }\n\n    render() {\n        return (\n            <Card>\n                {exerciseStore.lessonComplete ? (<ResultDisplay />) : (<Exercise />)}\n            </Card>\n        );\n    }\n}","import * as React from 'react';\nimport styles from './NavBar.module.css';\n\nexport const NavBar: React.SFC = ({children}) => {\n    return <div className={styles.navbar}>\n        {children}\n    </div>\n}","import { inject } from 'mobx-react';\nimport { RouterStore } from 'mobx-react-router';\nimport * as React from 'react';\nimport { Route } from 'react-router-dom';\nimport { Overview } from './Modules/Overview';\nimport { TypingLesson } from './Modules/TypingLessons/TypingLesson';\nimport { NavBar } from './components/NavBar/NavBar';\n\n@inject(\"routingStore\")\nclass Navigation extends React.Component<{ routingStore?: RouterStore }>{\n  render() {\n    return (\n      <NavBar>\n        <h1 onClick={this.goHome}>Learn Typing</h1>\n      </NavBar>\n    );\n  }\n\n  private goHome = () => {\n    this.props.routingStore!.push(`/`);\n  }\n}\n\nclass App extends React.Component<{}, {}> {\n  render() {\n    return (\n      <>\n        <Navigation />\n        <Route exact={true} path=\"/\" component={Overview} />\n        <Route\n          path=\"/lesson:id\"\n          render={({ match }) => (\n              <TypingLesson lessonId={match.params.id} />\n           )}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import createHashHistory from 'history/createHashHistory';\nimport { Provider } from 'mobx-react';\nimport { syncHistoryWithStore } from 'mobx-react-router';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Router } from 'react-router';\nimport 'typeface-roboto';\nimport App from './App';\nimport './index.css';\nimport * as stores from './Stores';\nimport { routingStore } from './Stores/routingStore';\n\nconst hashHistory = createHashHistory({ basename: process.env.PUBLIC_URL });\nconst history = syncHistoryWithStore(hashHistory, routingStore);\n\nReactDOM.render(\n  <Provider {...stores}>\n    <Router history={history}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root') as HTMLElement\n);"],"sourceRoot":""}