{"version":3,"sources":["components/NavBar/NavBar.tsx","components/Button/Button.tsx","components/Card/Card.tsx","pages/overview/Overview.tsx","components/ExerciseChar/ExerciseChar.tsx","pages/exercise/subpages/Exercise.tsx","pages/exercise/subpages/ResultDisplay.tsx","pages/exercise/TypingLesson.tsx","resources/loadLesson.ts","App.tsx","index.tsx"],"names":["NavBar","styled","div","StyledButton","button","StyledDefaultButton","Button","onClick","children","color","Card","LessonCard","lesson","title","description","to","id","Overview","overview","lessonData","map","key","cursorBlink","keyframes","StyledExerciseChar","span","CharOk","CharError","CurrentChar","ExerciseChar","data","isCurrent","displayChar","value","Exercise","completeLesson","useState","exerciseFields","setExerciseFields","currentIndex","setCurrentIndex","Date","startTime","setStartTime","isLastIndex","length","useEffect","handleKeyPress","e","target","document","body","preventDefault","mistakes","calculateMistakes","time","calculatePassedTime","keyValue","newExerciseFields","field","addEventListener","removeEventListener","text","item","filter","val","getTime","ResultDisplay","lessonStats","resetAction","TypingLesson","isComplete","setComplete","setLessonStats","useParams","find","split","forEach","push","loadLesson","parseInt","window","scrollTo","stats","Navigation","i18n","APP_TITLE","App","exact","path","component","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.4089b654.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const NavBar = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  height: 5rem;\n  background-color: white;\n  box-shadow: 0 0 0 1px rgba(16, 22, 26, 0.1), 0 0 0 rgba(16, 22, 26, 0),\n    0 1px 1px rgba(16, 22, 26, 0.2);\n  & > * {\n    padding: 0 2rem;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ntype colors = \"default\" | \"primary\";\n\nconst StyledButton = styled.button`\n  background: red;\n  color: white;\n  padding: 0.5rem 0.75rem;\n  font-weight: bold;\n  cursor: pointer;\n`;\nconst StyledDefaultButton = styled(StyledButton)`\n  background: blue;\n`;\n\ninterface IButtonProps {\n  onClick?: () => void;\n  color?: colors;\n}\n/**\n * A Button Component\n * A button executes\n * @param props\n */\nexport const Button: React.FC<IButtonProps> = ({\n  onClick,\n  children,\n  color = \"default\",\n}) => {\n    if (color === \"default\"){\n        return (<StyledDefaultButton onClick={onClick}>{children}</StyledDefaultButton>)\n    } else {\n        return (<StyledButton onClick={onClick}>{children}</StyledButton>)\n    }\n};\n","import * as React from 'react';\nimport styled from \"styled-components\";\n\nexport const Card = styled.div`\n    padding: 1.5rem;\n    margin: 1rem;\n    box-shadow: 0px 1px 3px 0px rgba(0,0,0,0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 2px 1px -1px rgba(0,0,0,0.12);\n    border-radius: 0.2rem;\n`;\n","import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"../../components/Button/Button\";\nimport { Card } from \"../../components/Card/Card\";\nimport lessonData from \"../../resources/lessons.json\";\n\ninterface LessonCardProps {\n  lesson: Lesson;\n}\n\nconst LessonCard: React.FC<LessonCardProps> = ({ lesson }) => (\n  <Card>\n    <h2>{lesson.title}</h2>\n    <p>{lesson.description}</p>\n    <Link to={`/lesson${lesson.id}`}>\n      <Button>Start Lesson</Button>\n    </Link>\n  </Card>\n);\n\nexport const Overview: React.FC = () => {\n  const overview = lessonData.map((lesson) => (\n    <LessonCard {...{ lesson, key: lesson.id }} />\n  ));\n\n  return <div>{overview}</div>;\n};\n","import * as React from \"react\";\nimport styled, { keyframes } from \"styled-components\";\n\nconst cursorBlink = keyframes`\n    0% {\n      background-color: yellow;\n    }\n    100% {\n      background-color: transparent;\n    }\n`;\n\n const StyledExerciseChar = styled.span`\n  font-family: 'Courier New'\n`;\n\nconst CharOk = styled(StyledExerciseChar)`\n    background-color: lightgreen;\n`\n\nconst CharError = styled(StyledExerciseChar)`\n    background-color: red;\n`\n\nconst CurrentChar = styled(StyledExerciseChar)`\n    background-color: yellow;\n    animation-name: ${cursorBlink};\n    animation-duration: 8s;\n    animation-iteration-count: infinite;\n`\ninterface IExerciseChar {\n  data: CharField;\n  isCurrent: boolean;\n}\n\nexport const ExerciseChar: React.FC<IExerciseChar> = ({ data, isCurrent }) => {\n  let displayChar = <>{data.value}</>;\n  if (data.value === \"\\n\"){\n      displayChar = (\n        <span>\n          <br />\n        </span>\n      )\n  }\n  if (isCurrent){\n      return <CurrentChar>{displayChar}</CurrentChar>\n  }\n  if (data.color === \"ok\"){\n            return <CharOk>{displayChar}</CharOk>\n\n  }\n    if (data.color === \"error\"){\n            return <CharError>{displayChar}</CharError>\n\n  }\n  return (\n    <StyledExerciseChar>\n      {displayChar}\n    </StyledExerciseChar>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { ExerciseChar } from \"../../../components/ExerciseChar/ExerciseChar\";\n\nexport const Exercise: React.FC<{\n  lesson: CharField[];\n  completeLesson: (stats: { mistakes: number; time: number }) => void;\n}> = ({ lesson = [], completeLesson }) => {\n\n  const [exerciseFields, setExerciseFields] = useState<CharField[]>(lesson);\n  const [currentIndex, setCurrentIndex] = useState<number>(0);\n  const [startTime, setStartTime] = useState<Date>(new Date())\n\n  const isLastIndex = currentIndex === exerciseFields.length;\n\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (e.key === \"Space\" && e.target === document.body) {\n        e.preventDefault();\n      }\n\n      if (currentIndex === 0) {\n        setStartTime(new Date());\n      }\n\n      if (isLastIndex) {\n        completeLesson({\n          mistakes: calculateMistakes(exerciseFields),\n          time: calculatePassedTime(startTime)\n        })\n        return;\n      }\n      const keyValue = e.key === \"Enter\" ? \"\\n\" : e.key;\n\n      const newExerciseFields = [...exerciseFields];\n      const field = exerciseFields[currentIndex];\n      newExerciseFields[currentIndex] = {\n        color: field.value === keyValue ? \"ok\" : \"error\",\n        value: field.value,\n      };\n      setExerciseFields(newExerciseFields);\n      setCurrentIndex(currentIndex + 1);\n    };\n\n    document.addEventListener(\"keydown\", handleKeyPress);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, [isLastIndex, exerciseFields, currentIndex, completeLesson, setStartTime, startTime]);\n\n  const text = exerciseFields.map((item, key) => (\n    <ExerciseChar key={key} data={item} isCurrent={key === currentIndex} />\n  ));\n\n  return <section>{text}</section>;\n};\n\nconst calculateMistakes = (lesson: CharField[]) => {\n  return lesson.filter((val) => val.color === \"error\").length;\n};\n\nexport const calculatePassedTime = (startTime: Date) => {\n  return ((new Date()).getTime() - startTime.getTime()) / 1000;\n};","import * as React from \"react\";\n\nimport { Button } from \"../../../components/Button/Button\";\nimport { LessonStats } from \"../TypingLesson\";\n\nexport const ResultDisplay: React.FC<{\n  lessonStats: LessonStats;\n  resetAction: () => void;\n}> = ({ lessonStats, resetAction }) => {\n  const { mistakes, time } = lessonStats;\n  return (\n    <>\n      <ul>\n        <li>Mistakes: {mistakes}</li>\n        <li>Time: {time}</li>\n      </ul>\n      <Button onClick={resetAction}>Reset</Button>\n    </>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Card } from \"../../components/Card/Card\";\nimport { Exercise } from \"./subpages/Exercise\";\nimport { ResultDisplay } from \"./subpages/ResultDisplay\";\nimport { useParams } from \"react-router\";\nimport { loadLesson } from \"../../resources/loadLesson\";\n\nexport interface LessonStats {\n  mistakes: number;\n  time: number;\n}\n\nexport const TypingLesson: React.FC = () => {\n  const [isComplete, setComplete] = useState<boolean>(false);\n  const [lessonStats, setLessonStats] = useState<LessonStats>({\n    mistakes: 0,\n    time: 0,\n  });\n  const { id } = useParams<{id: string}>();\n  const lessonId = parseInt(id, 10);\n  const lesson = loadLesson(lessonId);\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  const resetAction = () => setComplete(false);\n  const completeLesson = (stats: LessonStats) => {\n    setLessonStats(stats);\n    setComplete(true);\n  };\n\n  return (\n    <Card>\n      {isComplete ? (\n        <ResultDisplay {...{ resetAction, lessonStats }} />\n      ) : (\n        <Exercise {...{ lesson, completeLesson }} />\n      )}\n    </Card>\n  );\n};\n","import lessonData from \"./lessons.json\";\nexport const loadLesson = (id: number) => {\n  const lesson = lessonData.find((val: Lesson) => {\n    return val.id === id;\n  });\n  const exerciseFields: CharField[] = [];\n  if(lesson){\n    lesson.lesson.split(\"\").forEach((item) => {\n      exerciseFields.push({ value: item, color: \"transparent\" });\n    });\n  }\n\n  return exerciseFields;\n};\n","import * as React from \"react\";\nimport { Link, Route } from \"react-router-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport i18n from \"../src/i18n/en.json\";\nimport { NavBar } from \"./components/NavBar/NavBar\";\n\nimport { Overview } from \"./pages/overview/Overview\";\nimport { TypingLesson } from \"./pages/exercise/TypingLesson\";\n\nconst Navigation: React.FC = () => (\n  <NavBar>\n    <Link to=\"/\">\n      <h1>{i18n.APP_TITLE}</h1>\n    </Link>\n  </NavBar>\n);\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Navigation />\n\n      <Route exact={true} path=\"/\" component={Overview} />\n      <Route path=\"/lesson:id\" component={TypingLesson} />\n    </Router>\n  );\n};\n\nexport default App;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport \"typeface-roboto\";\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}